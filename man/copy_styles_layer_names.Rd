% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clc_styles.R
\name{copy_styles_layer_names}
\alias{copy_styles_layer_names}
\title{Copy Layer Styles from Source to Specific Layers in PostGIS Database}
\usage{
copy_styles_layer_names(from, to, layers, database, schema = "public")
}
\arguments{
\item{from}{A data origin. This can be:
- A string representing the path to a GeoPackage file.
- A `DBI` database connection object to a PostGIS database, created using [RPostgres::dbConnect()].}

\item{to}{A database connection object to the destination PostGIS database
(e.g., from `RPostgres::dbConnect`).}

\item{layers}{A character vector of layer names in the destination database
to which the style should be applied.}

\item{database}{A string specifying the name of the PostGIS database.}

\item{schema}{A string specifying the schema in the PostGIS database where
the layers reside. Default is `"public"`.}
}
\value{
The updated style object (`obj`), returned invisibly.
}
\description{
Copies the first style definition from a source (either a GeoPackage file or
a PostGIS connection) to the specified layers in a PostGIS database.
}
\details{
The function reads the first style from the `layer_styles` table in the source
and applies it to the specified layers in the destination PostGIS database.
}
\examples{
\dontrun{
source_gpkg <- "source.gpkg"
conn <- DBI::dbConnect(
  RPostgres::Postgres(),
  dbname = "mydb",
  host = "localhost",
  user = "user",
  password = "password"
)

layers_to_style <- c("layer1", "layer2")

copy_styles_layer_names(
  from = source_gpkg,
  to = conn,
  layers = layers_to_style,
  database = "mydb",
  schema = "public"
)

DBI::dbDisconnect(conn)
}
}
\seealso{
Other styles functions: 
\code{\link{copy_styles_layer}()},
\code{\link{get_layer_categories}()}
}
\concept{styles functions}
