[{"path":"https://josesamos.github.io/sigugr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sigugr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Geographic Data Transformation, Storage, and Publication","text":"Handling geographic data efficiently involves multiple steps: transforming match analysis requirements, storing optimized spatial databases, publishing sharing integration systems. package offers comprehensive solution streamline transformation, storage, publication raster vector geographic data. Built upon powerful sf terra R packages, toolkit bridges gap local geographic data processing server-based geographic information platforms like PostGIS GeoServer. primary aim simplify workflows users dealing diverse geographic data needs, allowing seamless transformation integration data processing, storage, publication R. document, datasets included package, well datasets used within , presented first. Next, section dedicated group functions: transformation, storage, publication; section illustrates functions examples. document concludes summarizing functionalities highlighting advantages.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Geographic Data Transformation, Storage, and Publication","text":"package includes uses following datasets support workflows.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"sigugr-gpkg","dir":"Articles","previous_headings":"Datasets","what":"sigugr.gpkg","title":"Geographic Data Transformation, Storage, and Publication","text":"lanjaron: polygonal vector layer representing boundaries municipality Lanjarón, located Granada, Spain. data sourced DERA (Datos Espaciales de Referencia de Andalucía). hydro: multilines layer, also obtained DERA, representing hydrographic network municipality Lanjarón. poi: points layer representing points interest, sourced OpenStreetMap clipped specified municipality. block: polygon layer representing building blocks considered municipality. data sourced CNIG (Centro Nacional de Información Geográfica).","code":"library(sigugr)  sigugr_gpkg <- system.file(\"extdata\", \"sigugr.gpkg\", package = \"sigugr\")  sf::st_layers(sigugr_gpkg) #> Driver: GPKG  #> Available layers: #>   layer_name     geometry_type features fields              crs_name #> 1      block           Polygon      104      1 ETRS89 / UTM zone 30N #> 2        poi             Point      121      4 ETRS89 / UTM zone 30N #> 3      hydro Multi Line String       11      4 ETRS89 / UTM zone 30N #> 4   lanjaron     Multi Polygon        1      4 ETRS89 / UTM zone 30N"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"sat-tif","dir":"Articles","previous_headings":"Datasets","what":"sat.tif","title":"Geographic Data Transformation, Storage, and Publication","text":"Satellite bands Lanjarón area, downloaded GloVis (USGS Global Visualization Viewer) Landsat-8. bands integrated initially processed using satres package. resampled coarser resolution included package. bands displayed result previous code snippet.","code":"sat_tif <- system.file(\"extdata\", \"sat.tif\", package = \"sigugr\")  sat <- terra::rast(sat_tif)  cat(paste(\"-\", names(sat), collapse = \"\\n\")) #> - B2 #> - B3 #> - B4 #> - B5 #> - B6 #> - B7"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"mdt","dir":"Articles","previous_headings":"Datasets","what":"mdt","title":"Geographic Data Transformation, Storage, and Publication","text":"set Digital Terrain Model (DTM) files corresponding sheets National Topographic Map Spain Lanjarón area, obtained CNIG. files also resampled coarser resolution reduce storage requirements.","code":"mdt_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  cat(paste(\"-\", list.files(mdt_dir), collapse = \"\\n\")) #> - MDT25-ETRS89-H30-1026-4-COB2.TIF #> - MDT25-ETRS89-H30-1027-3-COB2.TIF #> - MDT25-ETRS89-H30-1041-2-COB2.TIF #> - MDT25-ETRS89-H30-1041-4-COB2.TIF #> - MDT25-ETRS89-H30-1042-1-COB2.TIF #> - MDT25-ETRS89-H30-1042-3-COB2.TIF"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"clc-gpkg","dir":"Articles","previous_headings":"Datasets","what":"clc.gpkg","title":"Geographic Data Transformation, Storage, and Publication","text":"GeoPackage included clc package. use clc layer: fragment CLC data Lanjarón area, stored vector format. layer includes associated style definitions, embedded within GeoPackage (layer_styles table.). data sourced CNIG.","code":"clc_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  sf::st_layers(clc_gpkg) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1          clc Multi Polygon      136      2 ETRS89 / UTM zone 30N #> 2     lanjaron Multi Polygon        1      4 ETRS89 / UTM zone 30N #> 3 layer_styles            NA        1     12                  <NA>"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"data-transformation","dir":"Articles","previous_headings":"","what":"Data Transformation","title":"Geographic Data Transformation, Storage, and Publication","text":"module provides tools preparing manipulating raster vector data meet specific requirements. includes following functions, can grouped two categories: clipping transformations. generate_bbox(): Creates bounding box sf object. clip_raster(): Clips raster layers based polygon geometries. clip_layer(): Clips vector layer using polygon mask. clip_multipoligon(): Clips multipolygon vector layers safeguards common errors. aggregate_rasters(): Aggregates multiple raster files within folder. compose_raster(): Composes single raster layer multiple raster files.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"other-transformations","dir":"Articles","previous_headings":"Data Transformation","what":"Other transformations","title":"Geographic Data Transformation, Storage, and Publication","text":"set files comprise DTM area. resolution already modified , change shown . resulting files merged raster, also displayed . aggregated composed raster. continue working DTM stored package, composed. displayed following section, difference resolution compared previous image noticeable.","code":"temp_dir <- tempdir()  result_files <- aggregate_rasters(mdt_dir, temp_dir, factor = 6) r_mdt <- compose_raster(temp_dir)  terra::plot(r_mdt) mdt <- compose_raster(mdt_dir)"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"clipping","dir":"Articles","previous_headings":"Data Transformation","what":"Clipping","title":"Geographic Data Transformation, Storage, and Publication","text":"One common operation frequently perform clipping various layers using polygon. However, cases, clip using minimum enclosing bounding box instead. function generate_bbox() can used obtain bounding box. Polygon bounding box. crop DTM using bounding box display result. Clipped DTM. case, layers share CRS, keep_crs parameter allows us specify whether resulting raster retains CRS original raster reprojected CRS clipping polygon. becomes necessary change raster’s CRS, algorithm applied minimize area reprojected prevent distortions result. clip vector layer, use clc layer shown . clip_layer() function produces layer CRS clipping polygon. Clipped CLC layer. Clipping functions sometimes encounter issues multipolygon geometries; addressed clip_multipolygon() function, performs operation clip_layer() uses computationally expensive operations mitigate aforementioned issues. store databases publish layers, must saved files. Therefore, save generated layers later use.","code":"polygon <- sf::st_read(sigugr_gpkg, layer = \"lanjaron\", quiet = TRUE)  bbox <- generate_bbox(polygon)  plot(sf::st_geometry(bbox)) plot(sf::st_geometry(polygon), add = TRUE) mdt_bbox <- clip_raster(mdt, bbox, keep_crs = FALSE)  terra::plot(mdt_bbox) clc <- sf::st_read(clc_gpkg, layer = \"clc\", quiet = TRUE)  clc_polygon <- clip_layer(clc, polygon)  plot(sf::st_geometry(clc_polygon)) mdt_tif <- tempfile(fileext = \".tif\") terra::writeRaster(mdt_bbox, mdt_tif, overwrite = TRUE)  clc2_gpkg <- tempfile(fileext = \".gpkg\") sf::st_write(clc_polygon, clc2_gpkg, layer = \"clc_polygon\", delete_dsn = TRUE, quiet = TRUE)"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"data-storage-in-postgis","dir":"Articles","previous_headings":"","what":"Data Storage in PostGIS","title":"Geographic Data Transformation, Storage, and Publication","text":"module facilitates storage geographic data PostGIS database, offering optimized tools handling raster vector data. functions can divided two categories: layer storage style management. functions included follows: store_layers(): Stores vector layers geometries GeoPackage sf objects PostGIS. store_raster(): Stores raster datasets PostGIS. store_bands(): Stores individual raster bands PostGIS advanced analysis. copy_styles(): Copies styles layers GeoPackages PostGIS. get_layer_categories(): Extracts style layer categories. Important Note: code examples section next executed development document. However, disabled afterward avoid dependencies PostGIS database GeoServer, installed locally computer.","code":"evaluate <- FALSE"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"layer-storage","dir":"Articles","previous_headings":"Data Storage in PostGIS","what":"Layer storage","title":"Geographic Data Transformation, Storage, and Publication","text":", store following data PostGIS database: original satellite bands: store_bands() stores band separate table. Since transformed bands already stored README document, prefix added . generated DTM stored using store_raster() function, writes bands table. However, DTM consists single band. layers original GeoPackage newly generated CLC layer, using store_layers() function.","code":"conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"sigugr\",   host = \"localhost\",   user = \"postgres\",   password = \"postgres\" )  tables1 <- store_bands(sat_tif, conn, prefix = 'original_')  tables2 <- store_raster(mdt_tif, conn, table_name = 'mdt')  tables3 <- store_layers(sigugr_gpkg, layers = NULL, conn)  tables4 <- store_layers(clc2_gpkg, layers = NULL, conn)"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"style-management","dir":"Articles","previous_headings":"Data Storage in PostGIS","what":"Style management","title":"Geographic Data Transformation, Storage, and Publication","text":"clc_polygon layer stored clc2_gpkg file copied database. However, style original layer transferred. can copy style using copy_styles() function, demonstrated . result, including layers available database clc_polygon layer styles, can viewed QGIS, shown following figure. Accessing PostGIS QGIS. Additionally, get_layer_categories() function can used retrieve definitions style code. result can applied display raster bands derived vector layers using style original layers.","code":"copy_styles(from = clc_gpkg, to = conn, database = \"sigugr\", to_layers = \"clc_polygon\")"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"data-publication-on-geoserver","dir":"Articles","previous_headings":"","what":"Data Publication on GeoServer","title":"Geographic Data Transformation, Storage, and Publication","text":"module focuses publishing geographic data GeoServer. built around geoserver class defined package, functions implemented methods class. geoserver(): Manages GeoServer connection objects using S3 class. register_datastore_postgis(): Registers PostGIS databases GeoServer datastores. publish_layer(): Publishes vector layers GeoServer. publish_layer_set(): Publishes set vector layers GeoServer. publish_raster(): Publishes raster datasets GeoServer. publish_bands(): Publishes individual raster bands separate layers GeoServer. following demonstrates publish vector layers database. First, geoserver() function used create object connection parameters workspace. Next, PostGIS database registered datastore using register_datastore_postgis() function. Finally, vector layers can published individually publish_layer() function bulk using publish_layer_set() function, connects database retrieve available vector layer names. hand, rasters stored files can also published, GeoServer support using PostGIS datastore rasters. rasters, possible differentiate publishing entire raster bands together using publish_raster() function publishing band individually using publish_bands(). latter case, prefix also added distinguish bands already published README document example. PostGIS, GeoServer can accessed via QGIS using WMS. following figure shows layers available server within workspace defined connection, along display one layers -specifically, DTM generated earlier example. Accessing GeoServer QGIS.","code":"gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-db\",     db_name = 'sigugr',     host = 'localhost',     port = 5432,     db_user = 'postgres',     db_password = 'postgres',     schema = \"public\"   )  gso |>   publish_layer_set(conn) gso |>   publish_raster(mdt_tif, layer = 'mdt')  gso |>   publish_bands(sat_tif, prefix = 'original_')"},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Geographic Data Transformation, Storage, and Publication","text":"package provides framework geographic data management, covering lifecycle data processing publication. package enables users : Seamlessly transform raster vector datasets suit various analytical cartographic needs. Store geographic data persistently PostGIS efficient querying analysis. Publish geographic data GeoServer visualization, sharing, integration web GIS systems. package suitable researchers, data analysts, GIS professionals, facilitating robust workflows bridge local data processing server-based geospatial systems.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jose Samos. Author, maintainer. Universidad de Granada. Copyright holder.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samos J (2024). sigugr: Workflow Geographic Data. R package version 0.1.0, https://github.com/josesamos/sigugr, https://josesamos.github.io/sigugr/.","code":"@Manual{,   title = {sigugr: Workflow for Geographic Data},   author = {Jose Samos},   year = {2024},   note = {R package version 0.1.0, https://github.com/josesamos/sigugr},   url = {https://josesamos.github.io/sigugr/}, }"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"sigugr-workflow-for-geographic-data-","dir":"","previous_headings":"","what":"Workflow for Geographic Data","title":"Workflow for Geographic Data","text":"workflow geographic data typically involves: Data acquisition: Many datasets sourced web downloads. Data transformation: includes tasks raster composition, resolution adjustments, clipping, reprojection, style management. Data storage: Storing processed data databases, PostGIS. Data publication: Making data accessible via platforms like GeoServer. goal sigugr package provide comprehensive set functions simplify processes transforming, storing, publishing geographic data.","code":""},{"path":"https://josesamos.github.io/sigugr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Workflow for Geographic Data","text":"can install released version sigugr CRAN : development version GitHub :","code":"install.packages(\"sigugr\") # install.packages(\"pak\") pak::pak(\"josesamos/sigugr\")"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Workflow for Geographic Data","text":"satellite bands specific area downloaded GloVis (USGS Global Visualization Viewer). integrated initially transformed using satres package. reduce file size enable inclusion , resolution adjusted using aggregate_rasters() function provided package. Figure 1 shows original satellite bands started . Figure 1: Original satellite bands. interested area defined polygon representing municipality region. Using clip_raster() function, extract area interest. can either preserve original CRS bands reproject CRS clipping polygon, controlled keep_crs parameter. obtained result shown Figure 2. Figure 2: Satellite bands cut polygon. save result working file, used database storage publication. store result PostGIS database using store_raster() function. database must postgis postgis_raster extensions enabled. following Figure 3 shows access QGIS one tables included database. Figure 3: Accessing PostGIS QGIS. publish raster bands GeoServer, must use version stored file, GeoServer support PostGIS source raster data. publish using publish_raster() function. result can also viewed QGIS accessing GeoServer instance via WMS, shown Figure 4. Figure 4: Accessing GeoServer QGIS. Except functions used connect PostGIS GeoServer, well accessing layers files, following function calls used clip reproject satellite bands, store PostGIS, publish GeoServer: Using data obtained web, can easily transform, store, publish using functions implemented package, demonstrated example.","code":"library(sigugr)  tif <- system.file(\"extdata\", \"sat.tif\", package = \"sigugr\") sat <- terra::rast(tif) terra::plot(sat) gpkg <- system.file(\"extdata\", \"sigugr.gpkg\", package = \"sigugr\") polygon <- sf::st_read(gpkg, layer = \"lanjaron\", quiet = TRUE)  sat2 <- clip_raster(sat, polygon, keep_crs = FALSE)  terra::plot(sat2) sat_file <- tempfile(fileext = \".tif\") terra::writeRaster(sat2, sat_file, filetype = \"GTiff\", overwrite = TRUE) conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"sigugr\",   host = \"localhost\",   user = \"postgres\",   password = \"postgres\" )  tables <- store_bands(sat_file, conn)  DBI::dbDisconnect(conn) gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr\" )  gso |>   publish_bands(sat_file) # Clip and reproject sat2 <- clip_raster(sat, polygon, keep_crs = FALSE)  # Store in PostGIS tables <- store_bands(sat_file, conn)  # Publish in GeoServer gso |>   publish_bands(sat_file)"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Rasters in a Folder — aggregate_rasters","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"Aggregates raster files (`.tif` `.jp2`) specified folder given factor saves resulting files output folder.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"aggregate_rasters(dir, out_dir, factor = 2)"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"dir string specifying input folder containing raster files. out_dir string specifying output folder aggregated rasters saved. factor integer specifying aggregation factor (default 2).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"character vector paths processed raster files.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"output folder exist, creates .","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"temp_dir <- tempdir() input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  result_files <- aggregate_rasters(input_dir, temp_dir, factor = 4)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a Vector Layer with a Polygon — clip_layer","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"Clips vector layer using polygon layer. handles CRS transformations automatically necessary, ensuring output CRS input polygon.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"","code":"clip_layer(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"vector `sf` object representing vector layer clipped. polygon `sf` object representing polygon layer used clipping.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"`sf` object containing features input `vector` intersect `polygon`. output CRS `polygon`, retain attributes input `vector`.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_layer(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"Clips `MULTIPOLYGON` vector layer using polygon layer, handling specific issues might arise geometries encoded incorrectly containing unknown WKB types. serves fallback `clip_layer` function fails due errors like `ParseException: Unknown WKB type 12`, associated *MULTIPOLYGON* types.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"clip_multipoligon(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"vector `sf` multipolygon vector layer clipped. polygon `sf` polygon layer used clipping geometry.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"`sf` vector layer clipped geometries.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"function ensures input layer correctly encoded `MULTIPOLYGON` uses GDAL utilities re-encoding necessary. output projected CRS clipping polygon. solution inspired discussion handling WKB type errors R: <https://gis.stackexchange.com/questions/389814/r-st-centroid-geos-error-unknown-wkb-type-12>.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_multipoligon(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a raster based on a polygon — clip_raster","title":"Clip a raster based on a polygon — clip_raster","text":"Clips raster using polygon, preserving coordinate reference system (CRS) raster.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"clip_raster(raster, polygon, keep_crs = TRUE)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a raster based on a polygon — clip_raster","text":"raster `terra` raster clipped. polygon `sf` polygon layer used clipping. keep_crs Logical. `TRUE`, retains original CRS raster. `FALSE`, transforms raster polygon CRS. Default `TRUE`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a raster based on a polygon — clip_raster","text":"`terra` raster clipped extent polygon.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"source_gpkg <- system.file(\"extdata\", \"sigugr.gpkg\", package = \"sigugr\") p <-sf::st_read(source_gpkg, layer = 'lanjaron', quiet = TRUE)  source_tif <- system.file(\"extdata\", \"sat.tif\", package = \"sigugr\") r <- terra::rast(source_tif)  result <- clip_raster(r, p)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose a Raster Layer from Multiple Files — compose_raster","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"Combines multiple raster files single virtual raster layer (VRT). accepts one folder names containing raster files creates virtual raster file. output file name provided, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"compose_raster(dir, out_file = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"dir string vector strings representing folder names containing raster files. out_file string specifying output file name (without extension). `NULL`, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"`SpatRaster` object `terra` package.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  r <- compose_raster(input_dir)"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Styles from a Source to a Destination — copy_styles","title":"Copy Styles from a Source to a Destination — copy_styles","text":"Copies layer styles source (GeoPackage PostGIS database) destination (GeoPackage PostGIS database). source destination can specified flexibly, function supports copying styles multiple layers destination.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Styles from a Source to a Destination — copy_styles","text":"","code":"copy_styles(   from,   from_layer = NULL,   to,   database = NULL,   schema = \"public\",   to_layers = NULL )"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Styles from a Source to a Destination — copy_styles","text":"data source input style. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. from_layer Character (optional). Name layer source copy style . provided, function use first layer source defined style. data destination output styles. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. database Character (optional). Name destination PostGIS database (required destination PostGIS connection object). schema Character. Schema destination PostGIS database styles applied. Default \"public\". to_layers Character vector (optional). Names layers destination style applied. provided, style applied layers destination.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Styles from a Source to a Destination — copy_styles","text":"updated `layer_styles` table, returned invisibly.","code":""},{"path":[]},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Bounding Box as an sf Object — generate_bbox","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"Takes `sf` object `terra::SpatRaster` input returns new `sf` object representing bounding box (minimum bounding rectangle) input layer.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"generate_bbox(layer)"},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"layer `sf` object `terra::SpatRaster` object.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"`sf` object representing bounding box input layer.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"# Example with a vector layer source_gpkg <- system.file(\"extdata/sigugr.gpkg\", package = \"sigugr\") lanjaron <- sf::st_read(source_gpkg, layer = \"lanjaron\", quiet = TRUE) bbox_vector <- generate_bbox(lanjaron)  # Example with a raster layer raster_file <- system.file(\"extdata/sat.tif\", package = \"sigugr\") raster <- terra::rast(raster_file) bbox_raster <- generate_bbox(raster)"},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":null,"dir":"Reference","previous_headings":"","what":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"S3 class represents connection GeoServer instance. stores connection details, including base URL, user credentials, default workspace.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"","code":"geoserver(url, user, password, workspace)"},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"url character string specifying base URL GeoServer instance (e.g., `\"http://localhost:8080/geoserver\"`). user character string representing GeoServer username required permissions. password character string representing password specified user. workspace character string specifying default workspace use GeoServer operations.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"object class `geoserver` NULL error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" ) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Layer Categories Based on Raster Values — get_layer_categories","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"Extracts categories (IDs, descriptions, colors) first style definition stored GeoPackage PostGIS database. extracted categories filtered include present raster values.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"get_layer_categories(from, r_clc = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. r_clc `terra` raster object containing raster values filter categories. NULL, returns categories.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data frame containing filtered categories following columns:   - `id`: category ID (integer).   - `description`: description category (character).   - `color`: color associated category hexadecimal format (character).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"function retrieves style definitions `layer_styles` table provided GeoPackage PostGIS database. filters categories include whose IDs match unique values present raster. useful associating raster values corresponding descriptions colors, typically visualization analysis tasks.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"if (FALSE) { # \\dontrun{ gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") r_clc <- terra::rast(\"clc_raster.tif\")  categories <- get_layer_categories(from = gpkg_path, r_clc = r_clc) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish Bands of a Raster to GeoServer — publish_bands","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"Publishes bands multi-band GeoTIFF raster file separate coverages specified workspace GeoServer instance.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"","code":"publish_bands(gso, raster, prefix, postfix, bands)  # S3 method for class 'geoserver' publish_bands(gso, raster, prefix = NULL, postfix = NULL, bands = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"gso object class `geoserver` containing GeoServer connection details. raster character string specifying file path GeoTIFF raster file uploaded. prefix string prepend layer name. Default `NULL`. postfix string append layer name. Default `NULL`. bands named integer vector, index bands publish layer names. `NULL`, default value, bands published using band name layer name. unnamed indices provided, band name also used layer name.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  source_tif <- system.file(\"extdata/sat.tif\", package = \"sigugr\")  gso |>   publish_bands(source_tif) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Vector Layer to GeoServer — publish_layer","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"Publishes vector layer GeoServer. layer source must previously defined GeoSever datastore.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"","code":"publish_layer(gso, layer, title)  # S3 method for class 'geoserver' publish_layer(gso, layer, title = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"gso object class `geoserver` containing GeoServer connection details. layer string, name layer publish. title string, optional title layer. Defaults layer name provided.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"Prints appropriate message indicating success failure.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   )  gso |>   publish_layer(layer = 'sigugr_layer')  } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Vector Layer Set to GeoServer — publish_layer_set","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"Publishes vector layer set GeoServer. layer source must previously defined GeoSever datastore.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"","code":"publish_layer_set(gso, source, layers)  # S3 method for class 'geoserver' publish_layer_set(gso, source, layers = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"gso object class `geoserver` containing GeoServer connection details. source valid connection PostGIS database (`RPostgres` connection object). layers optional character vector layer names check publish. `NULL` (default), vector geometry layers source published.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"integer: 0 operation successful layers. 1 error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"Iterates set layers source database, checking whether layer contains vector geometry. layer meets criteria, published. `layers` parameter `NULL`, function publish layers vector geometry source. Prints appropriate messages indicating success failure.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   )  source <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'mydb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' )  gso |>   publish_layer_set(source)  } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Raster to GeoServer — publish_raster","title":"Publish a Raster to GeoServer — publish_raster","text":"Publishes GeoTIFF raster file workspace data store GeoServer instance.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Raster to GeoServer — publish_raster","text":"","code":"publish_raster(gso, raster, layer)  # S3 method for class 'geoserver' publish_raster(gso, raster, layer = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Raster to GeoServer — publish_raster","text":"gso object class `geoserver` containing GeoServer connection details. raster character string specifying file path GeoTIFF raster file uploaded. layer string, name layer publish. `NULL`, default value, layer name derived filename.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Raster to GeoServer — publish_raster","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Raster to GeoServer — publish_raster","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  source_tif <- system.file(\"extdata/sat.tif\", package = \"sigugr\")  gso |>   publish_raster(source_tif, \"sat-tiff\") } # }"},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"Registers PostGIS database `datastore` specified GeoServer workspace.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"","code":"register_datastore_postgis(   gso,   datastore,   db_name,   host,   port,   db_user,   db_password,   schema )  # S3 method for class 'geoserver' register_datastore_postgis(   gso,   datastore,   db_name,   host,   port = 5432,   db_user,   db_password,   schema = \"public\" )"},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"gso object class `geoserver` containing GeoServer connection details. datastore character string. name datastore created. db_name character string. name PostGIS database. host character string. database host. port integer. database port (default: 5432). db_user character string. database username. db_password character string. database password. schema character string. database schema (default: \"public\").","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"object class `geoserver` NULL error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"`datastore` already registered previously, need specify database connection. subsequent operations, `datastore` used. case, prints appropriate message.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   ) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Raster Bands to PostGIS — store_bands","title":"Store Raster Bands to PostGIS — store_bands","text":"Stores band raster specified schema PostGIS database. band written separate table database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Raster Bands to PostGIS — store_bands","text":"","code":"store_bands(   raster,   conn,   schema = \"public\",   prefix = NULL,   postfix = NULL,   bands = NULL )"},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Raster Bands to PostGIS — store_bands","text":"raster character string specifying file path GeoTIFF file containing raster bands stored. conn database connection object PostGIS database (e.g., `RPostgres::dbConnect`). schema string specifying schema PostGIS database raster layers stored. Default `\"public\"`. prefix string prepend layer name. Default `NULL`. postfix string append layer name. Default `NULL`. bands named integer vector, index bands store layer names. `NULL`, default value, bands stored using band name layer name. unnamed indices provided, band name also used layer name.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Raster Bands to PostGIS — store_bands","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store Raster Bands to PostGIS — store_bands","text":"Transforms table name according Snake Case convention.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Raster Bands to PostGIS — store_bands","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  sr <- terra::rast(nrows = 10, ncols = 10, nlyrs = 3, vals = runif(300)) sr_file <- tempfile(fileext = \".tif\") terra::writeRaster(sr, sr_file, filetype = \"GTiff\", overwrite = TRUE)  tables <- store_bands(sr_file, conn, schema = \"geodata\", prefix = \"example_\", postfix = \"_raster\")  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"Transfers vector layers valid geometries GeoPackage file specified PostGIS database schema. Optionally allows setting custom geometry column name, adding prefixes postfixes table names, renaming layer fields follow Snake Case convention.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"","code":"store_layers(   gpkg,   layers = NULL,   conn,   schema = \"public\",   prefix = NULL,   postfix = NULL,   geom_colum = \"geom\",   snake_case_fields = TRUE )"},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"gpkg string, path GeoPackage file. layers string vector, name layers transfer. NULL, vector layers transferred. conn PostGIS database connection object created [RPostgres::dbConnect()]. schema string, schema PostGIS layers stored. Default `\"public\"`. prefix string, optional prefix add table names PostGIS. Default `NULL`. postfix string, optional postfix add table names PostGIS. Default `NULL`. geom_colum string, name geometry column set. Default `\"geom\"`. snake_case_fields logical, whether convert field names Snake Case. Default `TRUE`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(RPostgres::Postgres(), dbname = \"mydb\") gpkg_file <- \"example.gpkg\" layers <- NULL store_layers(   gpkg_file, layers, conn, prefix = \"pre_\", postfix = \"_post\" ) DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Raster to PostGIS — store_raster","title":"Store Raster to PostGIS — store_raster","text":"Stores bands raster specified schema PostGIS database. bands written table database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Raster to PostGIS — store_raster","text":"","code":"store_raster(raster, conn, schema = \"public\", table_name = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Raster to PostGIS — store_raster","text":"raster character string specifying file path GeoTIFF raster file stored. conn database connection object PostGIS database (e.g., `RPostgres::dbConnect`). schema string specifying schema PostGIS database raster layers stored. Default `\"public\"`. table_name string, table name. `NULL`, default value, layer name derived filename.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Raster to PostGIS — store_raster","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store Raster to PostGIS — store_raster","text":"Transforms table name according Snake Case convention.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Raster to PostGIS — store_raster","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  sr <- terra::rast(nrows = 10, ncols = 10, nlyrs = 3, vals = runif(300)) sr_file <- tempfile(fileext = \".tif\") terra::writeRaster(sr, sr_file, filetype = \"GTiff\", overwrite = TRUE)  tables <- store_raster(sr_file, conn, schema = \"geodata\", table_name = \"example_raster\")  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/news/index.html","id":"sigugr-010","dir":"Changelog","previous_headings":"","what":"sigugr 0.1.0","title":"sigugr 0.1.0","text":"Initial functionality.","code":""}]
