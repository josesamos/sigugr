[{"path":"https://josesamos.github.io/sigugr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sigugr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jose Samos. Author, maintainer. Universidad de Granada. Copyright holder.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samos J (2024). sigugr: Geographic Data Processing Integration. R package version 0.1.0, https://josesamos.github.io/sigugr/.","code":"@Manual{,   title = {sigugr: Geographic Data Processing and Integration},   author = {Jose Samos},   year = {2024},   note = {R package version 0.1.0},   url = {https://josesamos.github.io/sigugr/}, }"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"sigugr-","dir":"","previous_headings":"","what":"Geographic Data Processing and Integration","title":"Geographic Data Processing and Integration","text":"goal sigugr …","code":""},{"path":"https://josesamos.github.io/sigugr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geographic Data Processing and Integration","text":"can install development version sigugr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"josesamos/sigugr\")"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Geographic Data Processing and Integration","text":"basic example shows solve common problem:","code":"library(sigugr) ## basic example code"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Rasters in a Folder — aggregate_rasters","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"Aggregates raster files (`.tif` `.jp2`) specified folder given factor saves resulting files output folder.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"aggregate_rasters(dir, out_dir, factor = 2)"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"dir string specifying input folder containing raster files. out_dir string specifying output folder aggregated rasters saved. factor integer specifying aggregation factor (default 2).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"character vector paths processed raster files.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"output folder exist, creates .","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"temp_dir <- tempdir() input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  result_files <- aggregate_rasters(input_dir, temp_dir, factor = 4)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"function clips `MULTIPOLYGON` vector layer using polygon layer, handling specific issues might arise geometries encoded incorrectly containing unknown WKB types. serves fallback `clip_vector()` function fails due errors like `ParseException: Unknown WKB type 12`, associated *MULTIPOLYGON* types.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"clip_multipoligon(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"vector `sf` multipolygon vector layer clipped. polygon `sf` polygon layer used clipping geometry.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"`sf` vector layer clipped geometries.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"function ensures input layer correctly encoded `MULTIPOLYGON` uses GDAL utilities re-encoding necessary. output projected CRS clipping polygon. solution inspired discussion handling WKB type errors R: <https://gis.stackexchange.com/questions/389814/r-st-centroid-geos-error-unknown-wkb-type-12>.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_multipoligon(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a raster based on a polygon — clip_raster","title":"Clip a raster based on a polygon — clip_raster","text":"function clips raster using polygon, preserving coordinate reference system (CRS) raster.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"clip_raster(raster, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a raster based on a polygon — clip_raster","text":"raster `terra` raster clipped. polygon `sf` polygon layer used clipping.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a raster based on a polygon — clip_raster","text":"`terra` raster clipped extent polygon.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"source_gpkg <- system.file(\"extdata\", \"sigugr.gpkg\", package = \"sigugr\") p <-sf::st_read(source_gpkg, layer = 'lanjaron', quiet = TRUE)  source_tif <- system.file(\"extdata\", \"sat.tif\", package = \"sigugr\") r <- terra::rast(source_tif)  result <- clip_raster(r, p)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a Vector Layer with a Polygon — clip_vector","title":"Clip a Vector Layer with a Polygon — clip_vector","text":"function clips vector layer (e.g., points, lines, polygons) using polygon layer. handles CRS (Coordinate Reference System) transformations automatically necessary, ensuring output CRS input polygon.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a Vector Layer with a Polygon — clip_vector","text":"","code":"clip_vector(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a Vector Layer with a Polygon — clip_vector","text":"vector `sf` object representing vector layer clipped. polygon `sf` object representing polygon layer used clipping.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a Vector Layer with a Polygon — clip_vector","text":"`sf` object containing features input `vector` intersect `polygon`. output CRS `polygon`, retain attributes input `vector`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a Vector Layer with a Polygon — clip_vector","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_vector(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose a Raster Layer from Multiple Files — compose_raster","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"Combines multiple raster files single virtual raster layer (VRT). accepts one folder names containing raster files creates virtual raster file. output file name provided, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"compose_raster(dir, out_file = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"dir string vector strings representing folder names containing raster files. out_file string specifying output file name (without extension). `NULL`, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"`SpatRaster` object `terra` package.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  r <- compose_raster(input_dir)"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Layer Styles from Source to Destination — copy_styles_layer","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"Copies first style definition source (either GeoPackage file PostGIS connection) assigns layers destination GeoPackage.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"","code":"copy_styles_layer(from, to)"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. string representing path destination GeoPackage file.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"updated `layer_styles` table, returned invisibly.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"function reads first style `layer_styles` table source GeoPackage PostGIS database. style applied layers destination GeoPackage.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Layer Styles from Source to Destination — copy_styles_layer","text":"","code":"if (FALSE) { # \\dontrun{ source_gpkg <- \"source.gpkg\" dest_gpkg <- \"destination.gpkg\"  copy_styles_layer(from = source_gpkg, to = dest_gpkg) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"Copies first style definition source (either GeoPackage file PostGIS connection) specified layers PostGIS database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"","code":"copy_styles_layer_names(from, to, layers, database, schema = \"public\")"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. database connection object destination PostGIS database (e.g., `RPostgres::dbConnect`). layers character vector layer names destination database style applied. database string specifying name PostGIS database. schema string specifying schema PostGIS database layers reside. Default `\"public\"`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"updated style object (`obj`), returned invisibly.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"function reads first style `layer_styles` table source applies specified layers destination PostGIS database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Styles to Specific Layers in a PostGIS Database — copy_styles_layer_names","text":"","code":"if (FALSE) { # \\dontrun{ source_gpkg <- \"source.gpkg\" conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  layers_to_style <- c(\"layer1\", \"layer2\")  copy_styles_layer_names(   from = source_gpkg,   to = conn,   layers = layers_to_style,   database = \"mydb\",   schema = \"public\" )  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Bounding Box as an sf Object — generate_bbox","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"function takes `sf` object input returns new `sf` object representing bounding box (minimum bounding rectangle) input layer.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"generate_bbox(layer)"},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"layer `sf` object, representing input vector layer.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"`sf` object representing bounding box input layer.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"source_gpkg <- system.file(\"extdata/sigugr.gpkg\", package = \"sigugr\") lanjaron <- sf::st_read(source_gpkg, layer = \"lanjaron\", quiet = TRUE)  bbox_layer <- generate_bbox(lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Layer Categories Based on Raster Values — get_layer_categories","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"Extracts categories (IDs, descriptions, colors) first style definition stored GeoPackage PostGIS database. extracted categories filtered include present raster values.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"get_layer_categories(from, r_clc)"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. r_clc `terra` raster object containing raster values filter categories.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data frame containing filtered categories following columns:   - `id`: category ID (integer).   - `description`: description category (character).   - `color`: color associated category hexadecimal format (character).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"function retrieves style definitions `layer_styles` table provided GeoPackage PostGIS database. filters categories include whose IDs match unique values present raster. function useful associating raster values corresponding descriptions colors, typically visualization analysis tasks.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"if (FALSE) { # \\dontrun{ gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") r_clc <- terra::rast(\"clc_raster.tif\")  categories <- get_layer_categories(from = gpkg_path, r_clc = r_clc) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/get_nexus.html","id":null,"dir":"Reference","previous_headings":"","what":"Get nexus — get_nexus","title":"Get nexus — get_nexus","text":"Determines appropriate path separator based whether folder path ends trailing slash .","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_nexus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get nexus — get_nexus","text":"","code":"get_nexus(name)"},{"path":"https://josesamos.github.io/sigugr/reference/get_nexus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get nexus — get_nexus","text":"name string representing folder path.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_nexus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get nexus — get_nexus","text":"string. input ends \"/\", returns empty string.   Otherwise, returns \"/\".","code":""},{"path":"https://josesamos.github.io/sigugr/reference/list_dir_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"List Raster Files in a Directory — list_dir_rasters","title":"List Raster Files in a Directory — list_dir_rasters","text":"function scans directory recursively lists raster files extensions `.tif` `.jp2`. search case-insensitive.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/list_dir_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Raster Files in a Directory — list_dir_rasters","text":"","code":"list_dir_rasters(dir)"},{"path":"https://josesamos.github.io/sigugr/reference/list_dir_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Raster Files in a Directory — list_dir_rasters","text":"dir character string specifying path directory search.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/list_dir_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Raster Files in a Directory — list_dir_rasters","text":"character vector containing full paths matching files. matching files found, empty character vector returned.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Raster Bands to PostGIS — pg_write_bands","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"Writes band raster (`terra::SpatRaster`) specified schema PostGIS database. band written separate table database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"","code":"pg_write_bands(sr, conn, schema = \"public\", prefix = NULL, postfix = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"sr `terra::SpatRaster` object containing raster bands write. conn database connection object PostGIS database (e.g., `RPostgres::dbConnect`). schema string specifying schema PostGIS database raster layers stored. Default `\"public\"`. prefix string prepend layer name. Default `NULL`. postfix string append layer name. Default `NULL`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"Transforms table name according Snake Case convention.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Raster Bands to PostGIS — pg_write_bands","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  sr <- terra::rast(nrows = 10, ncols = 10, nlyrs = 3, vals = runif(300))  tables <- pg_write_bands(sr, conn, schema = \"geodata\", prefix = \"example_\", postfix = \"_raster\")  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_gpkg_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","title":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","text":"Transfers vector layers valid geometries GeoPackage file specified PostGIS database schema. Optionally allows setting custom geometry column name, adding prefixes postfixes table names, renaming layer fields follow Snake Case convention.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_gpkg_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","text":"","code":"pg_write_gpkg_layers(   gpkg,   conn,   schema = \"public\",   prefix = NULL,   postfix = NULL,   geom_colum = \"geom\",   snake_case_fields = TRUE )"},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_gpkg_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","text":"gpkg string, path GeoPackage file. conn PostGIS database connection object created [RPostgres::dbConnect()]. schema string, schema PostGIS layers stored. Default `\"public\"`. prefix string, optional prefix add table names PostGIS. Default `NULL`. postfix string, optional postfix add table names PostGIS. Default `NULL`. geom_colum string, name geometry column set. Default `\"geom\"`. snake_case_fields logical, whether convert field names Snake Case. Default `TRUE`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_gpkg_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/pg_write_gpkg_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GeoPackage Layers with Geometry to PostGIS — pg_write_gpkg_layers","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(RPostgres::Postgres(), dbname = \"mydb\") gpkg_file <- \"example.gpkg\" pg_write_gpkg_layers(   gpkg_file, conn, schema = \"my_schema\", prefix = \"pre_\", postfix = \"_post\" ) DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/news/index.html","id":"sigugr-010","dir":"Changelog","previous_headings":"","what":"sigugr 0.1.0","title":"sigugr 0.1.0","text":"Initial functionality.","code":""}]
