[{"path":"https://josesamos.github.io/sigugr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sigugr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Geographic Data Transformation, Storage, and Publication","text":"Geospatial data heart modern applications, enabling critical analyses, decision-making, visualizations across various domains, including environmental monitoring, urban planning, disaster management. Handling geospatial data efficiently involves multiple steps: transforming match analysis requirements, storing optimized spatial databases, publishing sharing integration systems. package offers comprehensive solution streamline transformation, storage, publication raster vector geospatial data, additional capabilities managing layer styles GeoServer PostGIS. Built upon powerful sf terra R packages, toolkit bridges gap local geospatial data processing server-based geographic information system (GIS) platforms like PostGIS GeoServer. primary aim simplify workflows users dealing diverse geospatial data needs, allowing seamless integration data processing, storage, publication R.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Geographic Data Transformation, Storage, and Publication","text":"Geospatial data management often involves disparate tools platforms, requiring significant manual effort technical expertise achieve end--end workflows. Users typically encounter challenges : Efficiently transforming raster vector datasets fit analytical cartographic requirements. Persistently storing geospatial data robust, queryable spatial databases like PostGIS. Publishing geospatial layers associated styles server environments, GeoServer, visualization sharing. Managing geospatial data consistency, especially across platforms requiring adherence specific data formats schema. package developed address challenges providing cohesive set functions unify processing, storage, publication geospatial data. enables users focus analysis decision-making rather intricacies data management integration.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Geographic Data Transformation, Storage, and Publication","text":"package divided three primary modules based functionality:","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"geospatial-data-transformation","dir":"Articles","previous_headings":"Structure","what":"Geospatial Data Transformation","title":"Geographic Data Transformation, Storage, and Publication","text":"module provides tools preparing manipulating raster vector data meet specific requirements: aggregate_rasters(): Aggregates multiple raster files within folder. compose_raster(): Composes single raster layer multiple raster files. generate_bbox(): Creates bounding box sf object. clip_raster(): Clips raster layers based polygon geometries. clip_layer(): Clips vector layer using polygon mask. clip_multipoligon(): Clips multipolygon vector layers safeguards common errors.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"geospatial-data-storage-in-postgis","dir":"Articles","previous_headings":"Structure","what":"Geospatial Data Storage in PostGIS","title":"Geographic Data Transformation, Storage, and Publication","text":"module facilitates storage geospatial data PostGIS database, providing optimized tools working raster vector data: store_layers(): Stores vector layers geometries GeoPackage sf objects PostGIS. store_raster(): Stores raster datasets PostGIS. store_bands(): Stores individual raster bands PostGIS advanced analysis.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"geospatial-data-publication-on-geoserver","dir":"Articles","previous_headings":"Structure","what":"Geospatial Data Publication on GeoServer","title":"Geographic Data Transformation, Storage, and Publication","text":"module focuses publication geospatial data GeoServer, allowing integration web applications GIS platforms: geoserver(): Manages GeoServer connection objects using S3 class. register_datastore_postgis(): Registers PostGIS databases GeoServer datastores. publish_layer(): Publishes vector layers GeoServer. publish_layer_set(): Publishes set vector layers GeoServer. publish_raster(): Publishes raster datasets GeoServer. publish_bands(): Publishes individual raster bands separate layers GeoServer.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"style-management","dir":"Articles","previous_headings":"Structure","what":"Style Management","title":"Geographic Data Transformation, Storage, and Publication","text":"module offers tools managing layer styles GeoServer, GeoPackages, PostGIS: copy_styles_layer(): Copies styles layers GeoServer. copy_styles_layer_names(): Transfers styles specific layers stored PostGIS database. get_layer_categories(): Extracts layer categories based raster pixel values.","code":""},{"path":"https://josesamos.github.io/sigugr/articles/sigugr.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Geographic Data Transformation, Storage, and Publication","text":"package provides versatile efficient framework geospatial data management, covering entire lifecycle data processing publication. leveraging widely-used R libraries like sf terra, integrating powerful server platforms PostGIS GeoServer, package enables users : Seamlessly transform raster vector datasets suit various analytical cartographic needs. Store geospatial data persistently PostGIS efficient querying analysis. Publish geospatial data GeoServer visualization, sharing, integration web GIS systems. Manage transfer layer styles across different platforms maintain consistency. intuitive interface modular design, package suitable researchers, data analysts, GIS professionals, facilitating robust workflows bridge local data processing server-based geospatial systems. streamlining processes, helps users focus generating insights creating value geospatial data.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jose Samos. Author, maintainer. Universidad de Granada. Copyright holder.","code":""},{"path":"https://josesamos.github.io/sigugr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samos J (2024). sigugr: Workflow Geographic Data. R package version 0.1.0, https://josesamos.github.io/sigugr/.","code":"@Manual{,   title = {sigugr: Workflow for Geographic Data},   author = {Jose Samos},   year = {2024},   note = {R package version 0.1.0},   url = {https://josesamos.github.io/sigugr/}, }"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"sigugr-workflow-for-geographic-data-","dir":"","previous_headings":"","what":"Workflow for Geographic Data","title":"Workflow for Geographic Data","text":"goal sigugr …","code":""},{"path":"https://josesamos.github.io/sigugr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Workflow for Geographic Data","text":"can install development version sigugr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"josesamos/sigugr\")"},{"path":"https://josesamos.github.io/sigugr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Workflow for Geographic Data","text":"basic example shows solve common problem:","code":"library(sigugr) ## basic example code"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Rasters in a Folder — aggregate_rasters","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"Aggregates raster files (`.tif` `.jp2`) specified folder given factor saves resulting files output folder.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"aggregate_rasters(dir, out_dir, factor = 2)"},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"dir string specifying input folder containing raster files. out_dir string specifying output folder aggregated rasters saved. factor integer specifying aggregation factor (default 2).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"character vector paths processed raster files.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"output folder exist, creates .","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/aggregate_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Rasters in a Folder — aggregate_rasters","text":"","code":"temp_dir <- tempdir() input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  result_files <- aggregate_rasters(input_dir, temp_dir, factor = 4)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a Vector Layer with a Polygon — clip_layer","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"function clips vector layer (e.g., points, lines, polygons) using polygon layer. handles CRS (Coordinate Reference System) transformations automatically necessary, ensuring output CRS input polygon.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"","code":"clip_layer(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"vector `sf` object representing vector layer clipped. polygon `sf` object representing polygon layer used clipping.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"`sf` object containing features input `vector` intersect `polygon`. output CRS `polygon`, retain attributes input `vector`.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a Vector Layer with a Polygon — clip_layer","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_layer(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"function clips `MULTIPOLYGON` vector layer using polygon layer, handling specific issues might arise geometries encoded incorrectly containing unknown WKB types. serves fallback `clip_layer()` function fails due errors like `ParseException: Unknown WKB type 12`, associated *MULTIPOLYGON* types.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"clip_multipoligon(vector, polygon)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"vector `sf` multipolygon vector layer clipped. polygon `sf` polygon layer used clipping geometry.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"`sf` vector layer clipped geometries.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"function ensures input layer correctly encoded `MULTIPOLYGON` uses GDAL utilities re-encoding necessary. output projected CRS clipping polygon. solution inspired discussion handling WKB type errors R: <https://gis.stackexchange.com/questions/389814/r-st-centroid-geos-error-unknown-wkb-type-12>.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_multipoligon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe Clip a Multipolygon Vector Layer — clip_multipoligon","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\", quiet = TRUE) lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clip_multipoligon(clc, lanjaron)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a raster based on a polygon — clip_raster","title":"Clip a raster based on a polygon — clip_raster","text":"function clips raster using polygon, preserving coordinate reference system (CRS) raster.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"clip_raster(raster, polygon, keep_crs = TRUE)"},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a raster based on a polygon — clip_raster","text":"raster `terra` raster clipped. polygon `sf` polygon layer used clipping. keep_crs Logical. `TRUE`, retains original CRS raster. `FALSE`, transforms raster polygon CRS. Default `TRUE`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a raster based on a polygon — clip_raster","text":"`terra` raster clipped extent polygon.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/clip_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a raster based on a polygon — clip_raster","text":"","code":"source_gpkg <- system.file(\"extdata\", \"sigugr.gpkg\", package = \"sigugr\") p <-sf::st_read(source_gpkg, layer = 'lanjaron', quiet = TRUE)  source_tif <- system.file(\"extdata\", \"sat.tif\", package = \"sigugr\") r <- terra::rast(source_tif)  result <- clip_raster(r, p)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose a Raster Layer from Multiple Files — compose_raster","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"Combines multiple raster files single virtual raster layer (VRT). accepts one folder names containing raster files creates virtual raster file. output file name provided, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"compose_raster(dir, out_file = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"dir string vector strings representing folder names containing raster files. out_file string specifying output file name (without extension). `NULL`, temporary file used.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"`SpatRaster` object `terra` package.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/compose_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose a Raster Layer from Multiple Files — compose_raster","text":"","code":"input_dir <- system.file(\"extdata\", \"mdt\", package = \"sigugr\")  r <- compose_raster(input_dir)"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"Copies first style definition source (either GeoPackage file PostGIS connection) assigns layers destination GeoPackage.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"","code":"copy_styles_layer(from, to)"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. string representing path destination GeoPackage file.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"updated `layer_styles` table, returned invisibly.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"function reads first style `layer_styles` table source GeoPackage PostGIS database. style applied layers destination GeoPackage.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Layer Styles from Source to Destination in GeoPackage — copy_styles_layer","text":"","code":"if (FALSE) { # \\dontrun{ source_gpkg <- \"source.gpkg\" dest_gpkg <- \"destination.gpkg\"  copy_styles_layer(from = source_gpkg, to = dest_gpkg) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"Copies first style definition source (either GeoPackage file PostGIS connection) specified layers PostGIS database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"","code":"copy_styles_layer_names(from, to, layers, database, schema = \"public\")"},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. database connection object destination PostGIS database (e.g., `RPostgres::dbConnect`). layers character vector layer names destination database style applied. database string specifying name PostGIS database. schema string specifying schema PostGIS database layers reside. Default `\"public\"`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"updated style object (`obj`), returned invisibly.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"function reads first style `layer_styles` table source applies specified layers destination PostGIS database.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/copy_styles_layer_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Layer Styles from Source to Specific Layers in PostGIS Database — copy_styles_layer_names","text":"","code":"if (FALSE) { # \\dontrun{ source_gpkg <- \"source.gpkg\" conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  layers_to_style <- c(\"layer1\", \"layer2\")  copy_styles_layer_names(   from = source_gpkg,   to = conn,   layers = layers_to_style,   database = \"mydb\",   schema = \"public\" )  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Bounding Box as an sf Object — generate_bbox","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"function takes `sf` object `terra::SpatRaster` input returns new `sf` object representing bounding box (minimum bounding rectangle) input layer.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"generate_bbox(layer)"},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"layer `sf` object `terra::SpatRaster` object.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"`sf` object representing bounding box input layer.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/generate_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Bounding Box as an sf Object — generate_bbox","text":"","code":"# Example with a vector layer source_gpkg <- system.file(\"extdata/sigugr.gpkg\", package = \"sigugr\") lanjaron <- sf::st_read(source_gpkg, layer = \"lanjaron\", quiet = TRUE) bbox_vector <- generate_bbox(lanjaron)  # Example with a raster layer raster_file <- system.file(\"extdata/sat.tif\", package = \"sigugr\") raster <- terra::rast(raster_file) bbox_raster <- generate_bbox(raster)"},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":null,"dir":"Reference","previous_headings":"","what":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"S3 class represents connection GeoServer instance. stores connection details, including base URL, user credentials, default workspace.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"","code":"geoserver(url, user, password, workspace)"},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"url character string specifying base URL GeoServer instance (e.g., `\"http://localhost:8080/geoserver\"`). user character string representing GeoServer username required permissions. password character string representing password specified user. workspace character string specifying default workspace use GeoServer operations.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"object class `geoserver` NULL error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/geoserver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeoServer Connection Object (`geoserver` S3 Class) — geoserver","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" ) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Layer Categories Based on Raster Values — get_layer_categories","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"Extracts categories (IDs, descriptions, colors) first style definition stored GeoPackage PostGIS database. extracted categories filtered include present raster values.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"get_layer_categories(from, r_clc)"},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data origin. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. r_clc `terra` raster object containing raster values filter categories.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"data frame containing filtered categories following columns:   - `id`: category ID (integer).   - `description`: description category (character).   - `color`: color associated category hexadecimal format (character).","code":""},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"function retrieves style definitions `layer_styles` table provided GeoPackage PostGIS database. filters categories include whose IDs match unique values present raster. function useful associating raster values corresponding descriptions colors, typically visualization analysis tasks.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/get_layer_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Layer Categories Based on Raster Values — get_layer_categories","text":"","code":"if (FALSE) { # \\dontrun{ gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") r_clc <- terra::rast(\"clc_raster.tif\")  categories <- get_layer_categories(from = gpkg_path, r_clc = r_clc) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish Bands of a Raster to GeoServer — publish_bands","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"Publishes bands multi-band GeoTIFF raster file separate coverages specified workspace GeoServer instance.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"","code":"publish_bands(gso, raster, bands = NULL)  # S3 method for class 'geoserver' publish_bands(gso, raster, bands = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"gso object class `geoserver` containing GeoServer connection details. raster character string specifying file path GeoTIFF raster file uploaded. bands named integer vector, index bands publish layer names. `NULL`, default value, bands published using band name layer name. unnamed indices provided, band name also used layer name.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish Bands of a Raster to GeoServer — publish_bands","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  source_tif <- system.file(\"extdata/sat.tif\", package = \"sigugr\")  gso |>   publish_bands(source_tif) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Vector Layer to GeoServer — publish_layer","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"Publishes vector layer GeoServer using REST API.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"","code":"publish_layer(gso, layer, title)  # S3 method for class 'geoserver' publish_layer(gso, layer, title = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"gso object class `geoserver` containing GeoServer connection details. layer string, name layer publish. title string, optional title layer. Defaults layer name provided.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"Prints appropriate message indicating success failure.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Vector Layer to GeoServer — publish_layer","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   )  gso |>   publish_layer(layer = 'sigugr_layer')  } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Vector Layer Set to GeoServer — publish_layer_set","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"Publishes vector layer set GeoServer using REST API. layer source must previously defined GeoSever datastore.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"","code":"publish_layer_set(gso, source, layers)  # S3 method for class 'geoserver' publish_layer_set(gso, source, layers = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"gso object class `geoserver` containing GeoServer connection details. source valid connection PostGIS database (`RPostgres` connection object). layers optional character vector layer names check publish. `NULL` (default), vector geometry layers source published.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"integer: 0 operation successful layers. 1 error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"Iterates set layers source database, checking whether layer contains vector geometry. layer meets criteria, published. `layers` parameter `NULL`, function publish layers vector geometry source. Prints appropriate messages indicating success failure.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_layer_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Vector Layer Set to GeoServer — publish_layer_set","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   )  source <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'mydb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' )  gso |>   publish_layer_set(source)  } # }"},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a Raster to GeoServer — publish_raster","title":"Publish a Raster to GeoServer — publish_raster","text":"function publishes GeoTIFF raster file workspace data store GeoServer instance.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a Raster to GeoServer — publish_raster","text":"","code":"publish_raster(gso, raster, layer)  # S3 method for class 'geoserver' publish_raster(gso, raster, layer = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a Raster to GeoServer — publish_raster","text":"gso object class `geoserver` containing GeoServer connection details. raster character string specifying file path GeoTIFF raster file uploaded. layer string, name layer publish. `NULL`, default value, layer name derived filename.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a Raster to GeoServer — publish_raster","text":"integer: 0 operation successful layer already exists. 1 error occurred.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/publish_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a Raster to GeoServer — publish_raster","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  source_tif <- system.file(\"extdata/sat.tif\", package = \"sigugr\")  gso |>   publish_raster(source_tif, \"sat-tiff\") } # }"},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"function registers PostGIS database `datastore` specified GeoServer workspace using REST API.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"","code":"register_datastore_postgis(   gso,   datastore,   db_name,   host,   port,   db_user,   db_password,   schema )  # S3 method for class 'geoserver' register_datastore_postgis(   gso,   datastore,   db_name,   host,   port = 5432,   db_user,   db_password,   schema = \"public\" )"},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"gso object class `geoserver` containing GeoServer connection details. datastore character string. name datastore created. db_name character string. name PostGIS database. host character string. database host. port integer. database port (default: 5432). db_user character string. database username. db_password character string. database password. schema character string. database schema (default: \"public\").","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"object class `geoserver` NULL error occurred.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"`datastore` already registered previously, need specify database connection. subsequent operations, `datastore` used. case, prints appropriate message.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/register_datastore_postgis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a PostGIS Database as a DataStore in GeoServer — register_datastore_postgis","text":"","code":"if (FALSE) { # \\dontrun{ gso <- geoserver(   url = \"http://localhost:8080/geoserver\",   user = \"admin\",   password = \"geoserver\",   workspace = \"sigugr_test\" )  gso <- gso |>   register_datastore_postgis(     \"sigugr-postgis\",     db_name = 'sigugr_example',     host = 'localhost',     port = 5432,     db_user = 'user',     db_password = 'password',     schema = \"public\"   ) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Raster Bands to PostGIS — store_bands","title":"Store Raster Bands to PostGIS — store_bands","text":"Stores band raster (`terra::SpatRaster`) specified schema PostGIS database. band written separate table database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Raster Bands to PostGIS — store_bands","text":"","code":"store_bands(sr, conn, schema = \"public\", prefix = NULL, postfix = NULL)"},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Raster Bands to PostGIS — store_bands","text":"sr `terra::SpatRaster` object containing raster bands write. conn database connection object PostGIS database (e.g., `RPostgres::dbConnect`). schema string specifying schema PostGIS database raster layers stored. Default `\"public\"`. prefix string prepend layer name. Default `NULL`. postfix string append layer name. Default `NULL`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Raster Bands to PostGIS — store_bands","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store Raster Bands to PostGIS — store_bands","text":"Transforms table name according Snake Case convention.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Raster Bands to PostGIS — store_bands","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  sr <- terra::rast(nrows = 10, ncols = 10, nlyrs = 3, vals = runif(300))  tables <- store_bands(sr, conn, schema = \"geodata\", prefix = \"example_\", postfix = \"_raster\")  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"Transfers vector layers valid geometries GeoPackage file specified PostGIS database schema. Optionally allows setting custom geometry column name, adding prefixes postfixes table names, renaming layer fields follow Snake Case convention.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"","code":"store_layers(   gpkg,   layers = NULL,   conn,   schema = \"public\",   prefix = NULL,   postfix = NULL,   geom_colum = \"geom\",   snake_case_fields = TRUE )"},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"gpkg string, path GeoPackage file. layers string vector, name layers transfer. NULL, vector layers transferred. conn PostGIS database connection object created [RPostgres::dbConnect()]. schema string, schema PostGIS layers stored. Default `\"public\"`. prefix string, optional prefix add table names PostGIS. Default `NULL`. postfix string, optional postfix add table names PostGIS. Default `NULL`. geom_colum string, name geometry column set. Default `\"geom\"`. snake_case_fields logical, whether convert field names Snake Case. Default `TRUE`.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GeoPackage Layers with Geometry to PostGIS — store_layers","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(RPostgres::Postgres(), dbname = \"mydb\") gpkg_file <- \"example.gpkg\" layers <- NULL store_layers(   gpkg_file, layers, conn, schema = \"my_schema\", prefix = \"pre_\", postfix = \"_post\" ) DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Raster to PostGIS — store_raster","title":"Store Raster to PostGIS — store_raster","text":"Stores bands raster (`terra::SpatRaster`) specified schema PostGIS database. bands written table database.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Raster to PostGIS — store_raster","text":"","code":"store_raster(sr, conn, schema = \"public\", table_name)"},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Raster to PostGIS — store_raster","text":"sr `terra::SpatRaster` object containing raster bands write. conn database connection object PostGIS database (e.g., `RPostgres::dbConnect`). schema string specifying schema PostGIS database raster layers stored. Default `\"public\"`. table_name string, table name.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Raster to PostGIS — store_raster","text":"Invisibly returns character vector names tables written PostGIS.","code":""},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store Raster to PostGIS — store_raster","text":"Transforms table name according Snake Case convention.","code":""},{"path":[]},{"path":"https://josesamos.github.io/sigugr/reference/store_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Raster to PostGIS — store_raster","text":"","code":"if (FALSE) { # \\dontrun{ conn <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"mydb\",   host = \"localhost\",   user = \"user\",   password = \"password\" )  sr <- terra::rast(nrows = 10, ncols = 10, nlyrs = 3, vals = runif(300))  tables <- store_raster(sr, conn, schema = \"geodata\", table_name = \"example_raster\")  DBI::dbDisconnect(conn) } # }"},{"path":"https://josesamos.github.io/sigugr/news/index.html","id":"sigugr-010","dir":"Changelog","previous_headings":"","what":"sigugr 0.1.0","title":"sigugr 0.1.0","text":"Initial functionality.","code":""}]
